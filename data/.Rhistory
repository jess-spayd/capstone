multivariate2_crime_outlier$rse,
multivariate1_crime_outlier$rse),
type='text',
title = 'Table 2: Linear Regression, Part 1 Crime & Vacant Homes',
column.labels = c('Bivariate', 'Multivariate', 'Multivariate'),
model.numbers = F,
omit.stat = c('f'),
digits=3)
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
linewidth=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
bivariate_crime_outlier <- lm(vacant_abandoned ~ part1_crime,
data=crime_vacants_outlier_removed)
bivariate_crime_outlier$rse <- sqrt(diag(vcovHC(bivariate_crime_outlier, type="HC1")))
multivariate1_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
income,
data=crime_vacants_outlier_removed)
multivariate1_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate1_crime_outlier, type="HC1")))
multivariate1_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
hs_completion +
unemployment +
income,
data=crime_vacants_outlier_removed)
multivariate1_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate1_crime_outlier, type="HC1")))
multivariate2_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
income,
data=crime_vacants_outlier_removed)
multivariate2_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate2_crime_outlier, type="HC1")))
stargazer(bivariate_crime_outlier,
multivariate2_crime_outlier,
multivariate1_crime_outlier,
se=list(bivariate_crime_outlier$rse,
multivariate2_crime_outlier$rse,
multivariate1_crime_outlier$rse),
type='text',
title = 'Table 2: Linear Regression, Part 1 Crime & Vacant Homes',
column.labels = c('Bivariate', 'Multivariate', 'Multivariate'),
model.numbers = F,
omit.stat = c('f'),
digits=3)
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
setwd("~/Documents/JHU/Urban Data Analytics/Final-Paper/data/historical-vacant-homes")
vacant_abandoned_timeseries <- read_csv("vacant_abandoned_allyrs.csv")
vacant_abandoned_wide <- gather(vacant_abandoned_timeseries,
"year", "pct_vacant_abandoned", -1)
vacant_abandoned_bmore <- subset(vacant_abandoned_wide,
Community == "Baltimore City")
vacant_abandoned_bmore$year <- as.integer(vacant_abandoned_bmore$year)
ggplot(vacant_abandoned_bmore, aes(x=year, y=pct_vacant_abandoned)) +
geom_line() +
geom_point() +
labs(title="Vacant & Abandoned Homes in Baltimore City",
x="Year",
y="Percent of Residential Properties")+
scale_x_continuous(breaks=seq(from=2010, to=2020, by=2)) +
ylim(7.5,8.5) +
theme_minimal()
communities_num$hs_completion[is.na(communities_num$hs_completion)] <- median(communities_num$hs_completion, na.rm=T)
communities_num$homestead_taxcredits[is.na(communities_num$homestead_taxcredits)] <- median(communities_num$homestead_taxcredits, na.rm=T)
communities$hs_completion2 <- as.numeric(communities_num2$hs_completion)
hist(communities$hs_completion2,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
communities_num2$hs_completion[is.na(communities_num2$hs_completion)] <- median(communities_num2$hs_completion, na.rm=T)
communities_num2$homestead_taxcredits[is.na(communities_num2$homestead_taxcredits)] <- median(communities_num2$homestead_taxcredits, na.rm=T)
communities$hs_completion2 <- as.numeric(communities_num2$hs_completion)
hist(communities$hs_completion2,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
library(tidyverse)
library(readxl)
library(car)
library(stargazer)
library(sandwich)
library(lmtest)
library(outliers)
library(rgdal)
library(broom)
library(mapproj)
library(sp)
library(maps)
library(geojsonio)
## import dataset
setwd("~/Documents/JHU/Urban Data Analytics/Final-Paper")
full_dataset_2020 <- read_xlsx('full_dataset_2020.xlsx')
# df of only Baltimore City row
city_averages <- subset(full_dataset_2020, Community == 'Baltimore City')
city_averages <- subset(city_averages, select = -c(Community))
# df without Baltimory City row
communities <- subset(full_dataset_2020, Community != 'Baltimore City')
# remove community (discrete) variable
communities_num <- subset(communities, select = -c(Community))
setwd("~/Documents/JHU/Urban Data Analytics/Final-Paper/data/historical-vacant-homes")
vacant_abandoned_timeseries <- read_csv("vacant_abandoned_allyrs.csv")
vacant_abandoned_wide <- gather(vacant_abandoned_timeseries,
"year", "pct_vacant_abandoned", -1)
vacant_abandoned_bmore <- subset(vacant_abandoned_wide,
Community == "Baltimore City")
vacant_abandoned_bmore$year <- as.integer(vacant_abandoned_bmore$year)
ggplot(vacant_abandoned_bmore, aes(x=year, y=pct_vacant_abandoned)) +
geom_line() +
geom_point() +
labs(title="Vacant & Abandoned Homes in Baltimore City",
x="Year",
y="Percent of Residential Properties")+
scale_x_continuous(breaks=seq(from=2010, to=2020, by=2)) +
ylim(7.5,8.5) +
theme_minimal()
wdpath="~/Documents/JHU/Urban Data Analytics/Final-Paper/data"
## Read shapefile
setwd("~/Documents/JHU/Urban Data Analytics/Final-Paper/data")
bmore_csa_spdf <- readOGR(
dsn=paste0(wdpath, "/CSA/"),
layer="Community_Statistical_Areas__CSAs___Reference_Boundaries",
verbose=F
)
## Convert to dataframe with broom::tidy
## *IMPORTANT* Specify region arg to preserve Community names
bmore_csa_spdf_fortified <- tidy(bmore_csa_spdf, region="Community")
## Create polygon labels
csa_names <- aggregate(cbind(long, lat) ~ id, data=bmore_csa_spdf_fortified,
FUN=function(x)mean(range(x)))
## Join map with data
map_vacants <- bmore_csa_spdf_fortified %>%
left_join(. , communities, by=c("id"="Community"))
## Map
ggplot()+
geom_polygon(data=map_vacants, aes(x=long, y=lat, group=group,
fill=vacant_abandoned))+
theme_void() +
geom_sf()+
labs(title= "Baltimore's Vacant and Abandoned Homes (2020)",
fill="Percent") +
theme(legend.position="right") +
scale_fill_gradient(high = "#24135F", low = "darkgoldenrod3",
breaks=c(0, 10, 20, 30),
labels=c(0, 10, 20, 30),
limits=c(0, 32))
communities_num2 <- subset(communities_num, select =
-c(employment,
shootings, violent_crime, property_crime,
no_hs_diploma, some_college))
communities_num2 <- as.data.frame(communities_num2)
communities_final <- select(communities_num2,
bachelors_degree,
cash_homesales,
hs_completion,
income,
overdose_calls,
owner_occupied,
part1_crime,
unemployment,
vacant_abandoned,
vacants_ownedby_city)
community_names <- communities$Community
rownames(communities_final) <- community_names
communities_final <- rownames_to_column(communities_final, var = 'Community')
stargazer(communities_final,
digits=1,
title = 'Table 1. Summary Statistics',
type='text')
# chisq.out.test(communities_num2$part1_crime, variance=var(communities_num2$part1_crime))
### Downtown/Seton Hill is the outlier for part1_crime // 3rd quartile for vacants
# 	chi-squared test for outlier
## data:  communities_num2$part1_crime
## X-squared = 13.191, p-value = 0.0002813
## alternative hypothesis: highest value 134.6 is an outlier
boxplot(communities_num2$part1_crime,
main="Boxplot of part1_crime")
crime_vacants_outlier_removed <- subset(communities_num2,
part1_crime < 134.6)
hist(communities_num2$hs_completion,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
communities_num2$hs_completion_num <- as.numeric(communities_num2$hs_completion)
hist(communities_num2$hs_completion_num,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
communities_num2$hs_completion_num <- as.numeric(communities_num2$hs_completion)
hist(communities_num2$hs_completion_num,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate",
na.rm=T)
communities_num2$hs_completion_num <- as.numeric(communities_num2$hs_completion)
hist(communities_num2$hs_completion_num,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
communities_num2$hs_completion_num <- as.numeric(communities_num2$hs_completion)
hist(communities_num2$hs_completion_num,
main="Histogram of HS Completion Rates in Baltimore City",
xlab="High School Completion Rate")
communities_num2$hs_completion_num[is.na(communities_num2$hs_completion_num)] <- median(communities_num2$hs_completion_num, na.rm=T)
communities_num2$homestead_taxcredits[is.na(communities_num2$homestead_taxcredits)] <- median(communities_num2$homestead_taxcredits, na.rm=T)
communities_num2$hs_completion_num[is.na(communities_num2$hs_completion_num)] <- median(communities_num2$hs_completion_num, na.rm=T)
communities_num2$homestead_taxcredits[is.na(communities_num2$homestead_taxcredits)] <- median(communities_num2$homestead_taxcredits, na.rm=T)
crime_vacants_outlier_removed <- subset(communities_num2,
part1_crime < 134.6)
bivariate_crime_outlier <- lm(vacant_abandoned ~ part1_crime,
data=crime_vacants_outlier_removed)
bivariate_crime_outlier$rse <- sqrt(diag(vcovHC(bivariate_crime_outlier, type="HC1")))
multivariate1_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
income,
data=crime_vacants_outlier_removed)
multivariate1_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate1_crime_outlier, type="HC1")))
multivariate1_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
hs_completion_num +
unemployment +
income,
data=crime_vacants_outlier_removed)
multivariate1_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate1_crime_outlier, type="HC1")))
multivariate2_crime_outlier <- lm(vacant_abandoned ~
part1_crime +
bachelors_degree +
income,
data=crime_vacants_outlier_removed)
multivariate2_crime_outlier$rse <- sqrt(diag(vcovHC(multivariate2_crime_outlier, type="HC1")))
stargazer(bivariate_crime_outlier,
multivariate2_crime_outlier,
multivariate1_crime_outlier,
se=list(bivariate_crime_outlier$rse,
multivariate2_crime_outlier$rse,
multivariate1_crime_outlier$rse),
type='text',
title = 'Table 2: Linear Regression, Part 1 Crime & Vacant Homes',
column.labels = c('Bivariate', 'Multivariate', 'Multivariate'),
model.numbers = F,
omit.stat = c('f'),
digits=3)
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
bivariate_cashsales <- lm(vacant_abandoned ~ cash_homesales,
data=communities_num2)
bivariate_cashsales$rse <- sqrt(diag(vcovHC(bivariate_cashsales, type="HC1")))
multi_cashsales <- lm(vacant_abandoned ~ cash_homesales +
bachelors_degree +
hs_completion +
unemployment +
income,
data=communities_num2)
multi_cashsales$rse <- sqrt(diag(vcovHC(multi_cashsales, type="HC1")))
multi_cashsales2 <- lm(vacant_abandoned ~ cash_homesales +
bachelors_degree +
income,
data=communities_num2)
multi_cashsales2$rse <- sqrt(diag(vcovHC(multi_cashsales2, type="HC1")))
stargazer(bivariate_cashsales,
multi_cashsales2,
multi_cashsales,
se=list(bivariate_cashsales$rse,
multi_cashsales2$rse,
multi_cashsales$rse),
type='text',
title = 'Table 3: Linear Regression, Cash Sales & Vacant Homes',
column.labels = c('Bivariate', 'Multivariate', 'Multivariate'),
model.numbers = F,
omit.stat = c('f'),
digits=3)
ggplot(communities_num2, aes(cash_homesales, vacant_abandoned)) +
geom_point(alpha=0.5, size=3)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Cash Residential Sales and Vacant Homes",
x="% Residential Sales for Cash",
y="% Vacant and Abandoned Homes")+
ylim(0,35)+
xlim(0,95)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
hist(communities_final$owner_occupied,
main='Histogram: Percent Owner Occupied Homes',
xlab='Percent of housing units that are owner occupied')
bivariate_renters <- lm(vacant_abandoned ~ owner_occupied,
data=communities_num2)
bivariate_renters$rse <- sqrt(diag(vcovHC(bivariate_renters, type="HC1")))
quadratic_renters <- lm(vacant_abandoned ~ owner_occupied + I(owner_occupied^2),
data=communities_num2)
order_id <- order(communities_num2$owner_occupied)
lines(x = communities_num2$owner_occupied [order_id], y = fitted(quadratic_renters)[order_id],
col = "blue", lwd = 2)
bivariate_renters <- lm(vacant_abandoned ~ owner_occupied,
data=communities_num2)
bivariate_renters$rse <- sqrt(diag(vcovHC(bivariate_renters, type="HC1")))
quadratic_renters <- lm(vacant_abandoned ~ owner_occupied + I(owner_occupied^2),
data=communities_num2)
multi_renters <- lm(vacant_abandoned ~ owner_occupied + I(owner_occupied^2) +
bachelors_degree +
hs_completion +
unemployment +
income,
data=communities_num2)
multi_renters$rse <- sqrt(diag(vcovHC(multi_renters, type="HC1")))
multi_renters2 <- lm(vacant_abandoned ~ owner_occupied + I(owner_occupied^2) +
bachelors_degree +
income,
data=communities_num2)
multi_renters2$rse <- sqrt(diag(vcovHC(multi_renters2, type="HC1")))
ggplot(communities_num2, aes(owner_occupied, vacant_abandoned)) +
geom_point(alpha=0.5, size=3)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Owners/Renters and Vacant Homes",
x="% Homes that are Owner-Occupied",
y="% Vacant and Abandoned Homes")+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
stargazer(bivariate_renters,
quadratic_renters,
multi_renters2,
multi_renters,
se=list(bivariate_renters$rse,
quadratic_renters$rse,
multi_renters2$rse,
multi_renters$rse),
type='text',
title = 'Table 4: Regression, Owner-Occupied Homes & Vacant Homes',
column.labels = c('Linear-Bivariate', 'Quadratic-Bivariate',
'Quadratic-Multi', 'Quadratic-Multi'),
model.numbers = F,
omit.stat = c('f'),
digits=3)
ggplot(communities_num2, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(0,150)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(0,150)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
ggplot(crime_vacants_outlier_removed, aes(part1_crime, vacant_abandoned,
size=vacants_ownedby_city)) +
geom_point(alpha=0.5)+
scale_size(range = c(1, 20), name="% Vacants Owned by City")+
labs(title="Part 1 Crime and Vacant Homes",
x="Part 1 Crimes per 1,000 Residents",
y="% Vacant and Abandoned Homes")+
ylim(-0.5,35)+
xlim(4,116)+
theme_bw()+
geom_smooth(method="loess", formula=y~x, se=F, color='red', show.legend=F)+
geom_smooth(method = lm, formula=y~x, se=F, color='blue', show.legend=F)+
guides()
library(stargazer)
library(tidyverse)
library(Hmisc)
library(car)
library(corrplot)
library(sandwich)
library(lmtest)
library(treemap)
library(RColorBrewer)
# Import data
setwd("~/Documents/GitHub/capstone/data")
data_all <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
data_all <- as.data.frame(data_all)
data_subset <- read.csv('nsduh_2021_final_subset.csv',
stringsAsFactors=TRUE)
data_subset <- as.data.frame(data_subset)
dim(data_subset)
summary(data_all$insurance)
summary(data_all$insurance_type)
summary(as.factor(data_subset$unmet_need)) # 45879 total
summary(as.factor(data_subset$tx_util)) # 45899 total
## SUMMARY: insurance/ins type
# tree map: https://r-graph-gallery.com/treemap.html
treemap_data <- data_all
treemap_data$insurance <- fct_recode(data$insurance, 'employer' = 'private/employer')
ggplot(barplot_data, aes(fill=factor(AMHTXYR4), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 4: Mental Health Treatment Utilization by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Treatment Utilization",
labels=c('No',
'Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
barplot_data <- filter(data_all, !is.na(AMHTXND2))
barplot_data <- filter(barplot_data, !is.na(AMHSVTYP4))
barplot_data <- mutate(barplot_data,
insurance_type = fct_relevel(insurance_type,
'public', 'private',
'unknown', 'none'))
barplot_data <- filter(barplot_data, insurance_type != 'unknown')
barplot_data <- filter(barplot_data, !is.na(AMHTXYR4))
ggplot(barplot_data, aes(fill=factor(AMHTXYR4), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 4: Mental Health Treatment Utilization by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Treatment Utilization",
labels=c('No',
'Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 2: Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
