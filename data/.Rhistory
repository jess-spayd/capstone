dfm(tolower=TRUE) %>%
dfm_remove(c(stopwords('english'), gaga_stopwords))
# wordcloud
gaga_dfm_orig <- textstat_frequency(gaga_dfm, n=100)
set.seed(328)
wordcloud2(gaga_dfm_orig,
size = 0.5,
shape = 'diamond',
fontFamily = 'Arial',
color='darkturquoise',
minRotation = 0,
maxRotation = 0)
# to remove "Lady," "Gaga," and "pre" chorus
gaga_stopwords <- c('lady', 'gaga', 'pre')
# using original dataset
gaga <- dplyr::filter(gaga, nchar(gaga$'Lyric') >= 5)
gaga_corpus <- corpus(gaga, text = 'Lyric')
gaga_dfm <- gaga_corpus %>%
tokens(remove_punct = TRUE,
remove_symbols = TRUE,
remove_numbers = TRUE,
remove_url = TRUE) %>%
dfm(tolower=TRUE) %>%
dfm_remove(c(stopwords('english'), gaga_stopwords))
# wordcloud
gaga_dfm_orig <- textstat_frequency(gaga_dfm, n=100)
set.seed(328)
wordcloud2(gaga_dfm_orig,
size = 0.5,
shape = 'diamond',
fontFamily = 'Arial',
color='darkturquoise',
minRotation = 0,
maxRotation = 0)
setwd("~/Documents/GitHub/capstone")
library(stargazer)
library(tidyverse)
library(sandwich)
library(lmtest)
library(treemap)
# Import data
data_all <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
library(stargazer)
library(tidyverse)
library(sandwich)
library(lmtest)
library(treemap)
# Import data
setwd("~/Documents/GitHub/capstone/data")
data_all <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
data_all <- as.data.frame(data_all)
data_subset <- read.csv('nsduh_2021_final_subset.csv',
stringsAsFactors=TRUE)
data_subset <- as.data.frame(data_subset)
library(stargazer)
library(tidyverse)
library(sandwich)
library(lmtest)
library(treemap)
# Import data
#setwd("~/Documents/GitHub/capstone/data")
data_all <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
library(stargazer)
library(tidyverse)
library(sandwich)
library(lmtest)
library(treemap)
# Import data
setwd("~/Documents/GitHub/capstone/data")
data_all <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
data_all <- as.data.frame(data_all)
data_subset <- read.csv('nsduh_2021_final_subset.csv',
stringsAsFactors=TRUE)
data_subset <- as.data.frame(data_subset)
treemap_data <- data_all
treemap_data$insurance <- fct_recode(data$insurance, 'employer' = 'private/employer')
treemap_data <- data_all
treemap_data$insurance <- fct_recode(data_all$insurance, 'employer' = 'private/employer')
insurance_type <- c('public', 'public', 'public', 'none', 'unknown', 'private', 'private', 'unknown')
count <- dplyr::count(treemap_data, insurance)
treemap_data <- data.frame(insurance_type, count)
treemap(treemap_data,
index=c("insurance_type","insurance"),
vSize="n",
type="index",
title="Figure 1: Health Insurance Types and Sources",
align.labels=list(c('center', 'center'), c('right', 'bottom')),
mirror.x=FALSE,
mirror.y=TRUE,
aspRatio=1,
fontcolor.labels = 'black')
barplot_data <- filter(data_all, !is.na(AMHTXND2))
barplot_data <- filter(barplot_data, !is.na(AMHSVTYP4))
barplot_data <- mutate(barplot_data,
insurance_type = fct_relevel(insurance_type,
'public', 'private',
'unknown', 'none'))
barplot_data <- filter(barplot_data, insurance_type != 'unknown')
barplot_data <- filter(barplot_data, !is.na(AMHTXYR4))
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 2: Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 3: Unmet Mental Health Needs by Insurance",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
ggplot(barplot_data, aes(fill=factor(AMHTXYR4), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 4: Mental Health Treatment Utilization by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Treatment Utilization",
labels=c('No',
'Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
treatment_type <- filter(barplot_data, AMHSVTYP4 != '8')
treatment_type$AMHSVTYP4 <- as.factor(treatment_type$AMHSVTYP4)
treatment_type$AMHSVTYP4 <- fct_recode(treatment_type$AMHSVTYP4,
'Inpatient only' = '1',
'Outpatient only' = '2',
'Prescription meds only' = '3',
'Inpatient & Outpatient' = '4',
'Inpatient & Medication' = '5',
'Outpatient & Medication' = '6',
'Inpatient, Outpatient, & Medication' = '7')
treatment_type$AMHSVTYP4 <- fct_relevel(treatment_type$AMHSVTYP4,
'Inpatient only',
'Prescription meds only',
'Inpatient & Medication',
'Outpatient & Medication',
'Inpatient, Outpatient, & Medication',
'Outpatient only',
'Inpatient & Outpatient')
plotdata <- treatment_type %>%
group_by(insurance_type, AMHSVTYP4) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=AMHSVTYP4, x=insurance_type, y=pct)) +
geom_bar(position='fill', stat='identity')+
labs(title="Figure 5: Treatment Utilization by Service Type",
x="Insurance Type",
y="Percent",
fill="Service Type")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_brewer(palette = 'Set3')+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
treatment_type <- filter(barplot_data, AMHSVTYP4 != '8')
treatment_type$AMHSVTYP4 <- as.factor(treatment_type$AMHSVTYP4)
treatment_type$AMHSVTYP4 <- fct_recode(treatment_type$AMHSVTYP4,
'Inpatient only' = '1',
'Outpatient only' = '2',
'Prescription meds only' = '3',
'Inpatient & Outpatient' = '4',
'Inpatient & Medication' = '5',
'Outpatient & Medication' = '6',
'Inpatient, Outpatient, & Medication' = '7')
treatment_type$AMHSVTYP4 <- fct_relevel(treatment_type$AMHSVTYP4,
'Inpatient only',
'Prescription meds only',
'Inpatient & Medication',
'Outpatient & Medication',
'Inpatient, Outpatient, & Medication',
'Outpatient only',
'Inpatient & Outpatient')
plotdata <- treatment_type %>%
group_by(insurance_type, AMHSVTYP4) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=AMHSVTYP4, x=insurance_type, y=pct)) +
geom_bar(position='fill', stat='identity')+
labs(title="Figure 5: Treatment Utilization by Service Type",
x="Insurance Type",
y="Percent",
fill="Service Type")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_brewer(palette = 'Set3')+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
treatment_type <- filter(barplot_data, AMHSVTYP4 != '8')
treatment_type$AMHSVTYP4 <- as.factor(treatment_type$AMHSVTYP4)
treatment_type$AMHSVTYP4 <- fct_recode(treatment_type$AMHSVTYP4,
'Inpatient only' = '1',
'Outpatient only' = '2',
'Prescription meds only' = '3',
'Inpatient & Outpatient' = '4',
'Inpatient & Medication' = '5',
'Outpatient & Medication' = '6',
'Inpatient, Outpatient, & Medication' = '7')
treatment_type$AMHSVTYP4 <- fct_relevel(treatment_type$AMHSVTYP4,
'Inpatient only',
'Prescription meds only',
'Inpatient & Medication',
'Outpatient & Medication',
'Inpatient, Outpatient, & Medication',
'Outpatient only',
'Inpatient & Outpatient')
plotdata <- treatment_type %>%
group_by(insurance_type, AMHSVTYP4) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=AMHSVTYP4, x=insurance_type, y=pct)) +
geom_bar(position='fill', stat='identity')+
labs(title="Figure 5: Treatment Utilization by Service Type",
x="Insurance Type",
y="Percent",
fill="Service Type")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_brewer(palette = 'Set3')+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
treatment_type <- filter(barplot_data, AMHSVTYP4 != '8')
treatment_type$AMHSVTYP4 <- as.factor(treatment_type$AMHSVTYP4)
treatment_type$AMHSVTYP4 <- fct_recode(treatment_type$AMHSVTYP4,
'Inpatient only' = '1',
'Outpatient only' = '2',
'Prescription meds only' = '3',
'Inpatient & Outpatient' = '4',
'Inpatient & Medication' = '5',
'Outpatient & Medication' = '6',
'Inpatient, Outpatient, & Medication' = '7')
treatment_type$AMHSVTYP4 <- fct_relevel(treatment_type$AMHSVTYP4,
'Inpatient only',
'Prescription meds only',
'Inpatient & Medication',
'Outpatient & Medication',
'Inpatient, Outpatient, & Medication',
'Outpatient only',
'Inpatient & Outpatient')
plotdata <- treatment_type %>%
group_by(insurance_type, AMHSVTYP4) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=AMHSVTYP4, x=insurance_type, y=pct)) +
geom_bar(position='fill', stat='identity')+
labs(title="Figure 5: Treatment Utilization by Service Type",
x="Insurance Type",
y="Percent",
fill="Service Type")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_brewer(palette = 'Set3')+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
data <- read.csv("super-final-data-clean-reasons-notx.csv",
stringsAsFactors=TRUE)
setwd("~/Documents/GitHub/capstone/data")
setwd("~/Documents/GitHub/capstone/data")
data <- read.csv("super-final-data-clean-reasons-notx.csv",
stringsAsFactors=TRUE)
data <- as.data.frame(data)
data <- mutate(data, no_tx_reason = case_when(
AUUNCOST == 1 ~ 'Couldn\'t afford cost', # NO MH TMT COULDN'T AFFORD COST
AUUNNCOV == 1 ~ 'Insurance didn\'t cover MH', # NO MH TMT HEALTH INSUR DIDN'T COVER
AUUNENUF == 1 ~ 'Not enough insurance coverage' # NO MH TMT NOT ENUF HEALTH INSUR COVERAGE
))
data$no_tx_reason <- as.factor(data$no_tx_reason)
data$reason_category <- as.factor(data$AUUNRIM2)
data$reason_category <- fct_collapse(data$reason_category,
"Cost/Insurance" = c(1,4,5, 18, 41, 42),
"Stigma" = c(2, 8, 13, 17, 19, 20),
"Work/Family/Transportation" = c(3, 12, 14, 34),
"Lack of treatment options" = c(6, 23, 25, 26, 28, 32, 33, 44, 48),
"COVID-19" = c(60,61,62,63),
"Mental health symptoms" = c(22, 38),
"Other" = c(7, 9, 10, 11, 15, 16, 21,
24, 27, 29, 38, 40))
plotdata <- data %>%
group_by(insurance_type, no_tx_reason) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100, 2))
plotdata <- subset(plotdata, !is.na(no_tx_reason))
plotdata <- subset(plotdata, insurance_type != 'unknown')
plotdata <- subset(plotdata, insurance_type != 'none')
ggplot(plotdata, aes(fill=no_tx_reason, y=n, x=insurance_type)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = 'Set3') +
labs(title='Figure 6: Unmet MH need due to cost or insurance',
x='Insurance Type',
y='count',
fill='Reason')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
unmet_instype_priv_pub_reasons$reason_category <- as.factor(unmet_instype_priv_pub_reasons$AUUNRIM2)
no_tx <- subset(data, tx_util == 0)
unmet <- subset(data, unmet_need == 1)
## INSURANCE TYPE, exclude "unknown"
unmet_instype_known <- subset(unmet, insurance_type != 'unknown')
unmet_instype_known$insurance_type <- relevel(unmet_instype_known$insurance_type,
ref = "none")
## INSURANCE TYPE, only private vs. public
unmet_instype_priv_pub <- subset(unmet_instype_known, insurance_type != 'none')
unmet_instype_priv_pub$insurance_type <- relevel(unmet_instype_priv_pub$insurance_type,
ref = "private")
unmet_plotdata <- subset(unmet, !is.na(AUUNRIM2))
unmet_plotdata <- subset(unmet_plotdata, AUUNRIM2 != 70)
unmet_plotdata <- mutate(unmet_plotdata, reason = case_when(
AUUNRIM2 == 1 ~ 'You couldn\'t afford the cost',
AUUNRIM2 == 2 ~ 'Concerned neighbors/community have neg opinion',
AUUNRIM2 == 3 ~ 'Concerned might have a neg effect on your job',
AUUNRIM2 == 4 ~ 'Your health ins doesnt cover any mental hlth tmt',
AUUNRIM2 == 5 ~ 'Your health ins doesnt pay enuf for ment hlth tmt',
AUUNRIM2 == 6 ~ 'You did not know where to go to get services',
AUUNRIM2 == 7 ~ 'Concerned info might not be kept confidential',
AUUNRIM2 == 8 ~ 'Concerned might be committed/take medicine',
AUUNRIM2 == 9 ~ 'You didn\'t think you needed treatment at the time',
AUUNRIM2 == 10 ~ 'You thought could handle problem w/o treatment',
AUUNRIM2 == 11 ~ 'You didn\'t think treatment would help',
AUUNRIM2 == 12 ~ 'Didn\'t have time (b/c of job, childcare, other)',
AUUNRIM2 == 13 ~ 'Didn\'t want others to find out you needed treatmnt',
AUUNRIM2 == 14 ~ 'No transportation/too far away/hrs inconvenient',
AUUNRIM2 == 15 ~ 'Some other reason or reasons',
AUUNRIM2 == 16 ~ 'Afraid too painful/unpleasant/afraid of diagnosis',
AUUNRIM2 == 17 ~ 'Others dissuaded/didn\'t want you to/unsupportive',
AUUNRIM2 == 18 ~ 'You do not have any health insurance coverage',
AUUNRIM2 == 19 ~ 'Ashamed, embarrassed, afraid, or sign of weakness',
AUUNRIM2 == 20 ~ 'You were too stubborn/prideful to go',
AUUNRIM2 == 21 ~ 'You did not want to; reason unspecified',
AUUNRIM2 == 22 ~ 'Unmotivated/depressed/confused/angry/unworthy',
AUUNRIM2 == 23 ~ 'Services unavailable in your area/services limited',
AUUNRIM2 == 24 ~ 'Didn\'t want to talk about your problems w/anyone',
AUUNRIM2 == 25 ~ 'Didn\'t like how treated/don\'t like Dr(s)/hospitals',
AUUNRIM2 == 26 ~ 'Attempted to get trmt,unsuccessful in finding help',
AUUNRIM2 == 27 ~ 'Concerned how the court system would treat you',
AUUNRIM2 == 28 ~ 'No program/counselor competent/comfortable with',
AUUNRIM2 == 29 ~ 'Just never went/made appointment/arrangements',
AUUNRIM2 == 32 ~ 'Too much red tape/hassle to get services',
AUUNRIM2 == 33 ~ 'There were no openings/long waiting list/delays',
AUUNRIM2 == 34 ~ 'You had other problems/issues to deal with',
AUUNRIM2 == 38 ~ 'Too afraid to leave the house',
AUUNRIM2 == 40 ~ 'Unready to seek help/deal w/issues;othrwise unspfd',
AUUNRIM2 == 41 ~ 'Preferrd providr wont/may not accept hlth ins plan',
AUUNRIM2 == 42 ~ 'Health ins wont accept preferred provider/tmt',
AUUNRIM2 == 44 ~ 'Services desired unavailable/currently ineligible',
AUUNRIM2 == 48 ~ 'Looking/need to find/don\'t have counselor/Dr/prgm',
AUUNRIM2 == 60 ~ 'COVID-19; otherwise unspecified',
AUUNRIM2 == 61 ~ 'COVID-related access/closures/caseloads/waitlists',
AUUNRIM2 == 62 ~ 'COVID-related telehealth dislike/lack of privacy',
AUUNRIM2 == 63 ~ 'Fear of exposure to COVID-19'
))
unmet_instype_priv_pub_reasons <- subset(unmet_instype_priv_pub, !is.na(AUUNRIM2))
unmet_instype_priv_pub_reasons <- subset(unmet_instype_priv_pub_reasons, AUUNRIM2 != 70)
unmet_instype_priv_pub_reasons$insurance_type <- fct_drop(unmet_instype_priv_pub_reasons$insurance_type)
unmet_instype_priv_pub_reasons$reason_category <- as.factor(unmet_instype_priv_pub_reasons$AUUNRIM2)
unmet_instype_priv_pub_reasons$reason_category <- fct_collapse(unmet_instype_priv_pub_reasons$reason_category,
"Cost/Insurance" = c(1,4,5, 18, 41, 42),
"Stigma" = c(2, 8, 13, 17, 19, 20),
"Work/Family/Transportation" = c(3, 12, 14, 34),
"Lack of treatment options" = c(6, 23, 25, 26, 28, 32, 33, 44, 48),
"COVID-19" = c(60,61,62,63),
"Mental health symptoms" = c(22, 38),
"Other" = c(7, 9, 10, 11, 15, 16, 21,
24, 27, 29, 38, 40))
plotdata <- unmet_instype_priv_pub_reasons %>%
group_by(insurance_type, reason_category) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=reason_category, x=insurance_type, y=n)) +
geom_bar(position='stack', stat='identity') +
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
color='black',
position = position_stack(vjust = 0.5)) +
labs(x='Insurance Type',
y='count',
fill='Reason Category',
title='Figure 7: Barriers to Treatment by Insurance Type') +
scale_fill_brewer(palette = 'Set3') + # Pastel1/2 or Set3 ?
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
no_tx <- subset(data, tx_util == 0)
unmet <- subset(data, unmet_need == 1)
## INSURANCE TYPE, exclude "unknown"
unmet_instype_known <- subset(unmet, insurance_type != 'unknown')
unmet_instype_known$insurance_type <- relevel(unmet_instype_known$insurance_type,
ref = "none")
## INSURANCE TYPE, only private vs. public
unmet_instype_priv_pub <- subset(unmet_instype_known, insurance_type != 'none')
unmet_instype_priv_pub$insurance_type <- relevel(unmet_instype_priv_pub$insurance_type,
ref = "private")
unmet_plotdata <- subset(unmet, !is.na(AUUNRIM2))
unmet_plotdata <- subset(unmet_plotdata, AUUNRIM2 != 70)
unmet_plotdata <- mutate(unmet_plotdata, reason = case_when(
AUUNRIM2 == 1 ~ 'You couldn\'t afford the cost',
AUUNRIM2 == 2 ~ 'Concerned neighbors/community have neg opinion',
AUUNRIM2 == 3 ~ 'Concerned might have a neg effect on your job',
AUUNRIM2 == 4 ~ 'Your health ins doesnt cover any mental hlth tmt',
AUUNRIM2 == 5 ~ 'Your health ins doesnt pay enuf for ment hlth tmt',
AUUNRIM2 == 6 ~ 'You did not know where to go to get services',
AUUNRIM2 == 7 ~ 'Concerned info might not be kept confidential',
AUUNRIM2 == 8 ~ 'Concerned might be committed/take medicine',
AUUNRIM2 == 9 ~ 'You didn\'t think you needed treatment at the time',
AUUNRIM2 == 10 ~ 'You thought could handle problem w/o treatment',
AUUNRIM2 == 11 ~ 'You didn\'t think treatment would help',
AUUNRIM2 == 12 ~ 'Didn\'t have time (b/c of job, childcare, other)',
AUUNRIM2 == 13 ~ 'Didn\'t want others to find out you needed treatmnt',
AUUNRIM2 == 14 ~ 'No transportation/too far away/hrs inconvenient',
AUUNRIM2 == 15 ~ 'Some other reason or reasons',
AUUNRIM2 == 16 ~ 'Afraid too painful/unpleasant/afraid of diagnosis',
AUUNRIM2 == 17 ~ 'Others dissuaded/didn\'t want you to/unsupportive',
AUUNRIM2 == 18 ~ 'You do not have any health insurance coverage',
AUUNRIM2 == 19 ~ 'Ashamed, embarrassed, afraid, or sign of weakness',
AUUNRIM2 == 20 ~ 'You were too stubborn/prideful to go',
AUUNRIM2 == 21 ~ 'You did not want to; reason unspecified',
AUUNRIM2 == 22 ~ 'Unmotivated/depressed/confused/angry/unworthy',
AUUNRIM2 == 23 ~ 'Services unavailable in your area/services limited',
AUUNRIM2 == 24 ~ 'Didn\'t want to talk about your problems w/anyone',
AUUNRIM2 == 25 ~ 'Didn\'t like how treated/don\'t like Dr(s)/hospitals',
AUUNRIM2 == 26 ~ 'Attempted to get trmt,unsuccessful in finding help',
AUUNRIM2 == 27 ~ 'Concerned how the court system would treat you',
AUUNRIM2 == 28 ~ 'No program/counselor competent/comfortable with',
AUUNRIM2 == 29 ~ 'Just never went/made appointment/arrangements',
AUUNRIM2 == 32 ~ 'Too much red tape/hassle to get services',
AUUNRIM2 == 33 ~ 'There were no openings/long waiting list/delays',
AUUNRIM2 == 34 ~ 'You had other problems/issues to deal with',
AUUNRIM2 == 38 ~ 'Too afraid to leave the house',
AUUNRIM2 == 40 ~ 'Unready to seek help/deal w/issues;othrwise unspfd',
AUUNRIM2 == 41 ~ 'Preferrd providr wont/may not accept hlth ins plan',
AUUNRIM2 == 42 ~ 'Health ins wont accept preferred provider/tmt',
AUUNRIM2 == 44 ~ 'Services desired unavailable/currently ineligible',
AUUNRIM2 == 48 ~ 'Looking/need to find/don\'t have counselor/Dr/prgm',
AUUNRIM2 == 60 ~ 'COVID-19; otherwise unspecified',
AUUNRIM2 == 61 ~ 'COVID-related access/closures/caseloads/waitlists',
AUUNRIM2 == 62 ~ 'COVID-related telehealth dislike/lack of privacy',
AUUNRIM2 == 63 ~ 'Fear of exposure to COVID-19'
))
unmet_instype_priv_pub_reasons <- subset(unmet_instype_priv_pub, !is.na(AUUNRIM2))
unmet_instype_priv_pub_reasons <- subset(unmet_instype_priv_pub_reasons, AUUNRIM2 != 70)
unmet_instype_priv_pub_reasons$insurance_type <- fct_drop(unmet_instype_priv_pub_reasons$insurance_type)
unmet_instype_priv_pub_reasons$reason_category <- as.factor(unmet_instype_priv_pub_reasons$AUUNRIM2)
unmet_instype_priv_pub_reasons$reason_category <- fct_collapse(unmet_instype_priv_pub_reasons$reason_category,
"Cost/Insurance" = c(1,4,5, 18, 41, 42),
"Stigma" = c(2, 8, 13, 17, 19, 20),
"Work/Family/Transportation" = c(3, 12, 14, 34),
"Lack of treatment options" = c(6, 23, 25, 26, 28, 32, 33, 44, 48),
"COVID-19" = c(60,61,62,63),
"Mental health symptoms" = c(22, 38),
"Other" = c(7, 9, 10, 11, 15, 16, 21,
24, 27, 29, 38, 40))
plotdata <- unmet_instype_priv_pub_reasons %>%
group_by(insurance_type, reason_category) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
ggplot(plotdata, aes(fill=reason_category, x=insurance_type, y=n)) +
geom_bar(position='stack', stat='identity') +
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
color='black',
position = position_stack(vjust = 0.5)) +
labs(x='Insurance Type',
y='count',
fill='Reason Category',
title='Figure 7: Barriers to Treatment by Insurance Type') +
scale_fill_brewer(palette = 'Set3') + # Pastel1/2 or Set3 ?
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
unmet_plotdata %>%
group_by(reason) %>%
dplyr::summarise(freq = n()) %>%
dplyr::arrange(desc(freq)) %>%
slice(1:8) %>%
ggplot(., aes(y=reorder(reason, +freq), x=freq, fill=reason)) + geom_bar(stat='identity') +
scale_fill_brewer(palette = 'Set3') +
labs(title='Figure 8: Top Reasons for Unmet MH Need',
x= 'count',
y= 'Reason') +
theme(legend.position = 'none',
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
