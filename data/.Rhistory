#                           'Prescription meds only',
#                          'Inpatient & Outpatient',
#                         'Inpatient & Medication',
#                        'Outpatient & Medication',
#                       'Inpatient, Outpatient, & Medication'),
#           values=c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"))+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#676767", "#b6b6b6"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance)) +
geom_bar(position='fill', stat='count')+
labs(title="Unmet Mental Health Needs by Insurance",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#676767", "#b6b6b6"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 2: Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 3: Unmet Mental Health Needs by Insurance",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXYR4), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 4: Mental Health Treatment Utilization by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Treatment Utilization",
labels=c('No',
'Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
ggplot(plotdata, aes(fill=AMHSVTYP4, x=insurance_type, y=pct)) +
geom_bar(position='fill', stat='identity')+
labs(title="Figure 5: Treatment Utilization by Service Type",
x="Insurance Type",
y="Percent",
fill="Service Type")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_brewer(palette = 'Set3')+
# scale_fill_manual(name="Treatment Type",
#                    labels=c('Inpatient only',
#                            'Outpatient only',
#                           'Prescription meds only',
#                          'Inpatient & Outpatient',
#                         'Inpatient & Medication',
#                        'Outpatient & Medication',
#                       'Inpatient, Outpatient, & Medication'),
#           values=c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"))+
geom_text(aes(label = paste0(lbl, '%')),
size = 3,
position = position_stack(vjust = 0.5)) +
theme(panel.grid.major.x = element_blank())
unmet_needs <- barplot_data %>%
group_by(insurance, AMHTXND2) %>%
dplyr::summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = round(pct*100))
unmet_needs
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
View(control)
summary(control)
setwd("~/Documents/GitHub/capstone/data")
data <- read.csv("nsduh_2021_final.csv",
stringsAsFactors=TRUE)
data <- as.data.frame(data)
# Rename variables
data$unmet_need <- data$AMHTXND2
data$tx_util <- data$AMHTXYR4
data$age <- data$AGE3
data$military_service <- data$SERVICE
data$sex <- data$IRSEX
data$sexual_identity <- data$SEXIDENT
data$marital_status <- data$IRMARIT
data$education <- data$IREDUHIGHST2
data$race_ethnic <- data$NEWRACE2
data$emp_status <- data$IRWRKSTAT18
data$gov_asst <- data$GOVTPROG
data$urban_rural <- data$COUTYP4
# Categorical variables to factors + reference category
## SEX
data$sex <- as.factor(data$sex)
unique(data$sex)
data$sex <- fct_recode(data$sex,
male = "1", # 1=Male
female = "2") # 2=Female
#data$sex <- relevel(data$sex, ref = "male")
## SEXUAL IDENTITY
data$sexual_identity <- as.factor(data$sexual_identity)
data$sexual_identity <- fct_collapse(data$sexual_identity,
"1" = "1", # Hetero/straight
"2" = "2", # Lesbian/gay
"3" = "3", # Bisexual
"99" = c("85", "94", "97", "98", "99"))
data$sexual_identity <- as.numeric(as.character(data$sexual_identity))
data <- mutate(data, sexual_identity = na_if(sexual_identity, 99))
data$sexual_identity <- as.factor(data$sexual_identity)
data$sexual_identity <- fct_collapse(data$sexual_identity,
"Heterosexual" = "1",
"Lesbian/Gay" = "2",
"Bisexual" = "3")
unique(data$sexual_identity)
#data$sexual_identity <- relevel(data$sexual_identity, ref = "Heterosexual")
## MARITAL STATUS
data$marital_status <- as.factor(data$marital_status)
data$marital_status <- fct_collapse(data$marital_status,
"Married" = "1",
"Widowed" = "2",
"Divorced" = "3",
"Never married" = c("4","99"))
unique(data$marital_status)
#data$marital_status <- relevel(data$marital_status, ref = "Never married")
## EDUCATION
## RACE/ETHNICITY
data$race_ethnic <- as.factor(data$race_ethnic)
data$race_ethnic <- fct_collapse(data$race_ethnic,
"NonHispWhite" = "1",
"NonHispBlack" = "2",
"NonHispNativeAmAK" = "3",
"NonHispNativeHIPacIsl" = "4",
"NonHispAsian" = "5",
"NonHispMulti" = "6",
"Hispanic" = "7")
unique(data$race_ethnic)
#data$race_ethnic <- relevel(data$race_ethnic, ref = "NonHispWhite")
## EMPLOYMENT STATUS
data$emp_status <- as.factor(data$emp_status)
data$emp_status <- fct_collapse(data$emp_status,
"1" = "1",
"2" = "2",
"3" = "3",
"4" = "4",
"99" = "99")
data$emp_status <- as.numeric(as.character(data$emp_status))
data <- mutate(data, emp_status = na_if(emp_status, 99))
data$emp_status <- as.factor(data$emp_status)
data$emp_status <- fct_collapse(data$emp_status,
"FullTime" = "1",
"PartTime" = "2",
"Unemployed" = "3",
"Other" = "4")
summary(data$emp_status)
#data$emp_status <- relevel(data$emp_status, ref = "FullTime")
## URBAN/RURAL
#data$urban_rural <- as.factor(data$urban_rural)
#data$urban_rural <- fct_collapse(data$urban_rural,
#                                "LargeMetro" = "1",
#                               "SmallMetro" = "2",
#                              "Nonmetro" = "3")
#summary(data$urban_rural)
#data$urban_rural <- relevel(data$urban_rural, ref = "LargeMetro")
# Remove unused variables
final_dataset <- select(data, unmet_need, tx_util, insurance, insurance_type,
age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
# Export CSV
write.csv(final_dataset, "nsduh_2021_final_subset.csv", row.names = FALSE)
setwd("~/Documents/GitHub/capstone/data")
data <- read.csv("nsduh_2021_final_subset.csv",
stringsAsFactors=TRUE)
data <- as.data.frame(data)
## set reference levels
data$sex <- relevel(data$sex, ref = "male")
data$sexual_identity <- relevel(data$sexual_identity, ref = "Heterosexual")
data$marital_status <- relevel(data$marital_status, ref = "Never married")
data$race_ethnic <- relevel(data$race_ethnic, ref = "NonHispWhite")
data$emp_status <- relevel(data$emp_status, ref = "FullTime")
# Data subsets for analysis & reference levels
## INSURANCE TYPE, exclude "unknown"
data_instype_known <- subset(data, insurance_type != 'unknown')
data_instype_known$insurance_type <- relevel(data_instype_known$insurance_type,
ref = "none")
## INSURANCE TYPE, only private vs. public
data_instype_priv_pub <- subset(data_instype_known, insurance_type != 'none')
data_instype_priv_pub$insurance_type <- relevel(data_instype_priv_pub$insurance_type,
ref = "private")
## INSURANCE, exclude "unknown" or "other"
data_ins_known <- subset(data, insurance != 'unknown')
data_ins_known <- subset(data_ins_known, insurance != 'other')
data_ins_known$insurance <- relevel(data_ins_known$insurance,
ref = "none")
## INSURANCE, all except "unknown", "other" and "none"
data_has_ins <- subset(data_ins_known, insurance != 'none')
data_has_ins$insurance <- relevel(data_has_ins$insurance,
ref = "private/employer")
# Logit-Probit analysis functions
## Unmet Need x Insurance Type
unmet_instype <- function(dataset, title) {
logit <- glm(unmet_need ~ insurance_type +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "logit"),
data=dataset)
logit$rse <- sqrt(diag(vcovHC(logit, type="HC1")))
logit_pseudoR2 <- 1 - (logit$deviance) / (logit$null.deviance)
logit_pseudoR2 <- round(logit_pseudoR2, 3)
probit <- glm(unmet_need ~ insurance_type +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "probit"),
data=dataset)
probit$rse <- sqrt(diag(vcovHC(probit, type="HC1")))
probit_pseudoR2 <- 1 - (probit$deviance) / (probit$null.deviance)
probit_pseudoR2 <- round(probit_pseudoR2, 3)
stargazer(logit, probit,
se=list(logit$rse, probit$rse),
add.lines = list(c("Pseudo R-Squared", logit_pseudoR2, probit_pseudoR2)),
type = "text",
title=title,
omit.stat=c("adj.rsq","f"),
single.row = TRUE)
exp(cbind(OR = coef(logit), confint(logit)))
}
## Unmet Need x Insurance
unmet_insurance <- function(dataset, title) {
logit <- glm(unmet_need ~ insurance +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "logit"),
data=dataset)
logit$rse <- sqrt(diag(vcovHC(logit, type="HC1")))
logit_pseudoR2 <- 1 - (logit$deviance) / (logit$null.deviance)
logit_pseudoR2 <- round(logit_pseudoR2, 3)
probit <- glm(unmet_need ~ insurance +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "probit"),
data=dataset)
probit$rse <- sqrt(diag(vcovHC(probit, type="HC1")))
probit_pseudoR2 <- 1 - (probit$deviance) / (probit$null.deviance)
probit_pseudoR2 <- round(probit_pseudoR2, 3)
stargazer(logit, probit,
se=list(logit$rse, probit$rse),
add.lines = list(c("Pseudo R-Squared", logit_pseudoR2, probit_pseudoR2)),
type = "text",
title=title,
omit.stat=c("adj.rsq","f"),
single.row = TRUE)
exp(cbind(OR = coef(logit), confint(logit)))
}
## Tx Utilization x Insurance Type
tx_instype <- function(dataset, title) {
logit <- glm(tx_util ~ insurance_type +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "logit"),
data=dataset)
logit$rse <- sqrt(diag(vcovHC(logit, type="HC1")))
logit_pseudoR2 <- 1 - (logit$deviance) / (logit$null.deviance)
logit_pseudoR2 <- round(logit_pseudoR2, 3)
probit <- glm(tx_util ~ insurance_type +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "probit"),
data=dataset)
probit$rse <- sqrt(diag(vcovHC(probit, type="HC1")))
probit_pseudoR2 <- 1 - (probit$deviance) / (probit$null.deviance)
probit_pseudoR2 <- round(probit_pseudoR2, 3)
stargazer(logit, probit,
se=list(logit$rse, probit$rse),
add.lines = list(c("Pseudo R-Squared", logit_pseudoR2, probit_pseudoR2)),
type = "text",
title=title,
omit.stat=c("adj.rsq","f"),
single.row = TRUE)
exp(cbind(OR = coef(logit), confint(logit)))
}
## Tx Utilization x Insurance
tx_insurance <- function(dataset, title) {
logit <- glm(tx_util ~ insurance +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "logit"),
data=dataset)
logit$rse <- sqrt(diag(vcovHC(logit, type="HC1")))
logit_pseudoR2 <- 1 - (logit$deviance) / (logit$null.deviance)
logit_pseudoR2 <- round(logit_pseudoR2, 3)
probit <- glm(tx_util ~ insurance +
age + military_service + sex + sexual_identity +
marital_status + education + race_ethnic + HEALTH +
emp_status + gov_asst + INCOME + urban_rural,
family = binomial(link = "probit"),
data=dataset)
probit$rse <- sqrt(diag(vcovHC(probit, type="HC1")))
probit_pseudoR2 <- 1 - (probit$deviance) / (probit$null.deviance)
probit_pseudoR2 <- round(probit_pseudoR2, 3)
stargazer(logit, probit,
se=list(logit$rse, probit$rse),
add.lines = list(c("Pseudo R-Squared", logit_pseudoR2, probit_pseudoR2)),
type = "text",
title=title,
omit.stat=c("adj.rsq","f"),
single.row = TRUE)
exp(cbind(OR = coef(logit), confint(logit)))
}
data_subset <- read.csv('nsduh_2021_final_subset.csv',
stringsAsFactors=TRUE)
data_subset <- as.data.frame(data_subset)
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
control$age <- as.factor(control$age)
control$age <- fct_collapse(control$age,
'Under 18' = c('1', '2', '3'),
'18 to 25' = c('4', '5', '6'),
'26 to 64' = c('7', '8', '9', '10'),
'65 and over' = '11')
control$military_service <- as.factor(control$military_service)
###############################################################################
###############################################################################
control$education <- as.factor(control$education)
control$education <- fct_relabel(control$education,
'No HS diploma' = c('1','2','3','4','5','6','7'),
'HS diploma' = '8',
'Some college/Assoc degree' = c('9','10'),
'Bach degree or higher' = '11')
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
control$age <- as.factor(control$age)
control$age <- fct_collapse(control$age,
'Under 18' = c('1', '2', '3'),
'18 to 25' = c('4', '5', '6'),
'26 to 64' = c('7', '8', '9', '10'),
'65 and over' = '11')
control$military_service <- as.factor(control$military_service)
###############################################################################
###############################################################################
control$education <- as.factor(control$education)
control$education <- fct_recode(control$education,
'No HS diploma' = c('1','2','3','4','5','6','7'),
'HS diploma' = '8',
'Some college/Assoc degree' = c('9','10'),
'Bach degree or higher' = '11')
## DESCRIPTIVE STATS TABLE: CONTROLS
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
control$age <- as.factor(control$age)
control$age <- fct_collapse(control$age,
'Under 18' = c('1', '2', '3'),
'18 to 25' = c('4', '5', '6'),
'26 to 64' = c('7', '8', '9', '10'),
'65 and over' = '11')
control$military_service <- as.factor(control$military_service)
###############################################################################
###############################################################################
control$education <- as.factor(control$education)
control$education <- fct_collapse(control$education,
'No HS diploma' = c('1','2','3','4','5','6','7'),
'HS diploma' = '8',
'Some college/Assoc degree' = c('9','10'),
'Bach degree or higher' = '11')
###############################################################################
###############################################################################
control$HEALTH <- as.factor(control$HEALTH)
control$HEALTH <- fct_recode(control$HEALTH,
'Excellent' = '1',
'Very Good' = '2',
'Good' = '3',
'Fair' = '2',
'Poor' = '5')
control$gov_asst <- as.factor(control$gov_asst)
control$INCOME <- as.factor(control$INCOME)
control$INCOME <- fct_recode(control$INCOME,
'Less than $20,000' = '1',
'$20,000 - $49,999' = '2',
'$50,000 - $74,999' = '3',
'$75,000 or more' = '4')
control$urban_rural <- as.factor(control$urban_rural)
control$urban_rural <- fct_recode(control$urban_rural,
'Large Metro' = '1',
'Small Metro' = '2',
'Nonmetro' = '3')
summary(control)
## Unmet MH Need by Insurance Type including NONE
unmet_instype(data_instype_known,
'Unmet MH Need by Insurance Type including NONE')
## Unmet MH Need by Insurance Type PRIVATE vs. PUBLIC
unmet_instype(data_instype_priv_pub,
'Unmet MH Need by Insurance Type PRIVATE vs. PUBLIC')
## Unmet MH Need by Insurance including NONE
#unmet_insurance(data_ins_known,
#             'Unmet MH Need by Insurance including NONE')
## Unmet MH Need by Insurance
#unmet_insurance(data_has_ins,
#             'Unmet MH Need by Insurance PRIVATE vs. PUBLIC')
## Tx Utilization by Insurance Type including NONE
tx_instype(data_instype_known,
'Tx Utilization by Insurance Type including NONE')
## Tx Utilization by Insurance Type PRIVATE vs. PUBLIC
tx_instype(data_instype_priv_pub,
'Tx Utilization by Insurance Type PRIVATE vs. PUBLIC')
control$HEALTH <- as.factor(control$HEALTH)
control$HEALTH <- fct_recode(control$HEALTH,
'Excellent' = '1',
'Very Good' = '2',
'Good' = '3',
'Fair' = '4',
'Poor' = '5')
control <- select(data_subset, age, military_service, sex, sexual_identity,
marital_status, education, race_ethnic, HEALTH,
emp_status, gov_asst, INCOME, urban_rural)
control$age <- as.factor(control$age)
control$age <- fct_collapse(control$age,
'Under 18' = c('1', '2', '3'),
'18 to 25' = c('4', '5', '6'),
'26 to 64' = c('7', '8', '9', '10'),
'65 and over' = '11')
control$military_service <- as.factor(control$military_service)
###############################################################################
###############################################################################
control$education <- as.factor(control$education)
control$education <- fct_collapse(control$education,
'No HS diploma' = c('1','2','3','4','5','6','7'),
'HS diploma' = '8',
'Some college/Assoc degree' = c('9','10'),
'Bach degree or higher' = '11')
###############################################################################
###############################################################################
control$HEALTH <- as.factor(control$HEALTH)
control$HEALTH <- fct_recode(control$HEALTH,
'Excellent' = '1',
'Very Good' = '2',
'Good' = '3',
'Fair' = '4',
'Poor' = '5')
control$gov_asst <- as.factor(control$gov_asst)
control$INCOME <- as.factor(control$INCOME)
control$INCOME <- fct_recode(control$INCOME,
'Less than $20,000' = '1',
'$20,000 - $49,999' = '2',
'$50,000 - $74,999' = '3',
'$75,000 or more' = '4')
control$urban_rural <- as.factor(control$urban_rural)
control$urban_rural <- fct_recode(control$urban_rural,
'Large Metro' = '1',
'Small Metro' = '2',
'Nonmetro' = '3')
summary(control)
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 3: Unmet Mental Health Needs by Insurance",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
ggplot(barplot_data, aes(fill=factor(AMHTXND2), x=insurance_type)) +
geom_bar(position='fill', stat='count')+
labs(title="Figure 2: Unmet Mental Health Needs by Insurance Type",
x="Insurance Type",
y="Percent")+
scale_y_continuous(labels=c('0', '25', '50', '75', '100'))+
scale_fill_manual(name="Unmet need",
labels=c('No','Yes'),
values=c("#80B1D3", "#FDB462"))+
theme(panel.grid.major.x = element_blank())
